// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  profileImage ProfileImage?
  username     String        @unique
  password     String        @unique
  email        String        @unique
  role         Role          @default(USER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  fname        String
  lname        String
}

model Profile {
  id                  String             @id @default(uuid())
  profileImage        ProfileImage?
  fname               String
  mname               String?
  lname               String
  birthYear           Int?
  birthMonth          Int?
  birthDay            Int?
  County              String?
  State               String?
  FileIndividualJoin  FileProfileJoin[] // no items in the list will return empty list
  ImageIndividualJoin ImageProfileJoin[]
}

model File {
  id                 String            @id @default(uuid())
  link               String
  FileIndividualJoin FileProfileJoin[]
}

// making it so that each person can have one or more files and
// one file can be related to one or more people
// when inputing a file, make it so they can select which profile to add the file too
model FileProfileJoin {
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String
  file      File    @relation(fields: [fileId], references: [id])
  fileId    String

  @@id([profileId, fileId])
}

model Image {
  id                  String             @id @default(uuid())
  link                String
  ImageIndividualJoin ImageProfileJoin[]
}

model ImageProfileJoin {
  image     Image   @relation(fields: [imageId], references: [id])
  imageId   String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  @@id([imageId, profileId])
}

model ProfileImage {
  id        String   @id @default(uuid())
  link      String
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?  @unique
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
}

enum Role {
  ADMIN
  USER
}
